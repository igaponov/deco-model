// @flow
export interface Algorithm {
  ceilingLimit(
    prevDepth: ?number,
    nextDepth: number,
    time: number,
    n2Fraction: number,
    heFraction: number,
    attrs: Object,
  ): [number, Object];
}

declare type TissueValues = {
  heHalftime: number,
  n2Halftime: number,
  heCoefficient: { a: number, b: number },
  n2Coefficient: { a: number, b: number },
};

declare export function createTissues(n2a: Array<number>): Array<TissueValues>;

declare export function createZHL16ATissues(): Array<TissueValues>;

declare export function createZHL16BTissues(): Array<TissueValues>;

declare export function createZHL16CTissues(): Array<TissueValues>;

declare export var compartmentsName: Symbol;

declare export var saturationName: Symbol;

declare export var gfName: Symbol;

declare export class Compartment {
  pN2: number;

  pHe: number;

  constructor(pN2: number, pHe: number): void;
}

declare export class ZHL16 implements Algorithm {
  +tissueValues: Array<TissueValues>;

  +surfacePressure: number;

  +waterCoefficient: number;

  constructor(tissueValues: Array<TissueValues>, surfacePressure: number, waterDensity: number): void;

  ceilingLimit(
    prevDepth: ?number,
    nextDepth: number,
    time: number,
    n2Fraction: number,
    heFraction: number,
    attrs: Object,
  ): [number, Object];
}
